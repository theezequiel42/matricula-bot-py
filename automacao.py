# automacao.py

import os
import time
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import pyautogui

# ‚è≥ Carrega vari√°veis de ambiente
load_dotenv()

# üîê Constantes de acesso
EDUCARWEB_URL = "https://fraiburgo.educarweb.net.br"
USUARIO = os.getenv("USUARIO")
SENHA = os.getenv("SENHA")

# üöÄ Inicia o navegador com Selenium
def iniciar_navegador():
    options = webdriver.ChromeOptions()
    options.add_argument("--start-maximized")
    driver = webdriver.Chrome(options=options)
    return driver

# üîê Faz login no sistema EducarWeb
def fazer_login(driver):
    driver.get(EDUCARWEB_URL)
    wait = WebDriverWait(driver, 10)

    wait.until(EC.presence_of_element_located((By.ID, "usuario"))).send_keys(USUARIO)
    driver.find_element(By.ID, "senha").send_keys(SENHA)
    driver.find_element(By.ID, "btnlogin").click()

    wait.until(EC.url_contains("selecione-o-portal"))
    portal = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[contains(text(),'Administrador Do Transporte')]")))
    driver.execute_script("arguments[0].click();", portal)

    wait.until(EC.url_contains("/Home"))

# üìÇ Acessa o menu Matr√≠cula Transporte
def acessar_matricula_transporte(driver):
    wait = WebDriverWait(driver, 10)

    try:
        driver.implicitly_wait(2)
        menu = wait.until(EC.presence_of_element_located((By.XPATH, "//div[contains(text(),'Matr√≠cula')]")))
        driver.execute_script("arguments[0].scrollIntoView();", menu)
        if menu.get_attribute("aria-expanded") == "false":
            driver.execute_script("arguments[0].click();", menu)
        
        transporte = wait.until(EC.element_to_be_clickable((By.XPATH, "//a[contains(text(),'Matr√≠cula Transporte')]")))
        driver.execute_script("arguments[0].click();", transporte)

        wait.until(EC.presence_of_element_located((By.XPATH, "//input[contains(@placeholder, 'DIGITE AQUI O NOME DA PESSOA')]")))

    except Exception as e:
        print(f"‚ùå Erro ao acessar Matr√≠cula Transporte: {e}")

# üîé Pesquisa se o aluno j√° possui matr√≠cula
def pesquisar_aluno(driver, nome_aluno):
    wait = WebDriverWait(driver, 10)

    try:
        campo = wait.until(EC.presence_of_element_located(
            (By.XPATH, "//input[contains(@placeholder, 'DIGITE AQUI O NOME DA PESSOA')]")
        ))
        campo.clear()
        campo.send_keys(nome_aluno)

        botao = driver.find_element(By.XPATH, "//button[contains(span/text(), 'Pesquisar')]")
        driver.execute_script("arguments[0].click();", botao)
        driver.implicitly_wait(3)

        resultado = driver.find_elements(By.XPATH, "//div[@title='Possui Matr√≠cula']")
        if resultado:
            print(f"‚úÖ {nome_aluno} j√° est√° matriculado.")
            return True

        print(f"üìå {nome_aluno} ainda n√£o est√° matriculado.")
        return False

    except Exception as e:
        print(f"‚ùå Erro ao pesquisar {nome_aluno}: {e}")
        return False

# üìù Inicia o cadastro se o aluno n√£o estiver matriculado
def cadastrar_aluno(driver, aluno):
    wait = WebDriverWait(driver, 10)

    try:
        print(f"\nüìù Iniciando cadastro de {aluno['NOME']}...")

        nome_completo = aluno['NOME']
        selecionado = False

        # 1Ô∏è‚É£ Tentativas de clique: exato, parcial e fallback
        tentativas = [
            f"//div[@class='x-grid-cell-inner' and text()='{nome_completo}']",
            f"//div[@class='x-grid-cell-inner' and contains(text(), '{nome_completo.split()[0]}')]",
            "//table[contains(@class, 'x-grid-table')]//tr[contains(@class, 'x-grid-row')]"
        ]

        for tentativa_xpath in tentativas:
            try:
                print(f"üîç Tentando clicar em: {tentativa_xpath}")
                elemento = wait.until(EC.element_to_be_clickable((By.XPATH, tentativa_xpath)))
                driver.execute_script("arguments[0].scrollIntoView();", elemento)
                ActionChains(driver).move_to_element(elemento).pause(0.2).click().perform()
                time.sleep(1)

                # ‚úÖ Verifica se o bot√£o 'Incluir' est√° habilitado
                try:
                    wait.until(EC.element_to_be_clickable((By.ID, "ext-gen1323")))
                    print("‚úÖ Aluno realmente selecionado! Bot√£o 'Incluir' habilitado.")
                    selecionado = True
                    break
                except:
                    print("‚ö†Ô∏è Bot√£o 'Incluir' n√£o habilitado ap√≥s o clique.")

            except Exception as e:
                print(f"‚ö†Ô∏è Falha na tentativa: {e}")

        # ‚ùå Se n√£o selecionou, aborta
        if not selecionado:
            print(f"üö´ N√£o foi poss√≠vel selecionar {nome_completo}. Pulando para o pr√≥ximo.")
            return

        # 2Ô∏è‚É£ Clica no bot√£o "Incluir" com verifica√ß√£o de modal
        print("üß© Tentando clicar no bot√£o 'Incluir'...")

        for tentativa in range(2):
            try:
                botao_incluir = wait.until(EC.element_to_be_clickable((By.ID, "ext-gen1323")))
                driver.execute_script("arguments[0].scrollIntoView();", botao_incluir)
                ActionChains(driver).move_to_element(botao_incluir).pause(0.2).click().perform()
                print(f"‚úÖ Clique no bot√£o 'Incluir' (tentativa {tentativa + 1})")
                time.sleep(2)

                # 3Ô∏è‚É£ Confirma se o formul√°rio/modal apareceu
                modal_xpath = "//div[contains(@class,'x-window') and contains(@role, 'dialog')]"
                wait.until(EC.presence_of_element_located((By.XPATH, modal_xpath)))
                print("‚úÖ Modal de matr√≠cula detectado. Continuando...")
                break

            except Exception as e:
                print(f"‚ö†Ô∏è Tentativa {tentativa + 1} falhou ao clicar no bot√£o 'Incluir': {e}")
                if tentativa == 1:
                    print("üö´ N√£o foi poss√≠vel abrir o formul√°rio. Pulando este aluno.")
                    return
                else:
                    time.sleep(1)

        # 3Ô∏è‚É£ Preenche o formul√°rio com PyAutoGUI
        preencher_com_tab(aluno)

    except Exception as e:
        print(f"‚ùå Erro ao iniciar cadastro de {aluno['NOME']}: {e}")

# üìã Preenche o formul√°rio de cadastro do aluno
def preencher_formulario(driver, aluno):
    wait = WebDriverWait(driver, 10)

    turnos_map = {
        "MATUTINO": "Manh√£",
        "VESPERTINO": "Tarde",
        "NOTURNO": "Noite",
        "INTEGRAL": "Integral"
    }

    try:
        print("üìå Entrou na fun√ß√£o preencher_formulario()")
        print("‚è≥ Aguardando modal do formul√°rio...")

        modal = wait.until(EC.presence_of_element_located((
            By.XPATH, "//div[contains(@class,'x-window') and contains(@role, 'dialog')]"
        )))
        wait.until(EC.visibility_of(modal))
        print("‚úÖ Modal do formul√°rio carregado!")

        # 1Ô∏è‚É£ Selecionar Turno
        print("üîç Buscando dropdown de turno...")
        dropdown_turno = wait.until(EC.element_to_be_clickable((
            By.XPATH, "//div[contains(@class, 'x-form-arrow-trigger') and @role='button']"
        )))
        dropdown_turno.click()
        time.sleep(1)

        turno_normalizado = aluno["TURNO"].upper()
        turno_label = turnos_map.get(turno_normalizado, "Integral")

        print(f"‚åõ Buscando op√ß√£o do turno: {turno_label}")
        opcao_turno = wait.until(EC.presence_of_element_located((
            By.XPATH, f"//li[contains(text(),'{turno_label}')]"
        )))
        driver.execute_script("arguments[0].scrollIntoView(true);", opcao_turno)
        wait.until(EC.element_to_be_clickable((
            By.XPATH, f"//li[contains(text(),'{turno_label}')]"
        )))
        driver.execute_script("arguments[0].click();", opcao_turno)
        print(f"‚úÖ Turno '{turno_label}' selecionado com JS!")

        # 2Ô∏è‚É£ Selecionar Unidade Escolar
        print("üîç Fechando dropdown anterior clicando no bot√£o da unidade...")
        dropdown_unidade_botao = wait.until(EC.element_to_be_clickable((By.ID, "ext-gen1811")))
        driver.execute_script("arguments[0].click();", dropdown_unidade_botao)
        time.sleep(1)

        print("üîç Aguardando lista de unidades aparecer...")
        lista_unidade = wait.until(EC.presence_of_element_located((
            By.XPATH, "//li[contains(text(),'EEB GON√áALVES DIAS')]"
        )))
        driver.execute_script("arguments[0].scrollIntoView(true);", lista_unidade)
        time.sleep(0.5)
        driver.execute_script("arguments[0].click();", lista_unidade)
        print("‚úÖ Unidade selecionada!")

        # 3Ô∏è‚É£ Modalidade
        print("üîç Selecionando modalidade...")
        dropdown_modalidade = wait.until(EC.element_to_be_clickable((By.ID, "ext-gen1801")))
        dropdown_modalidade.click()
        time.sleep(1)

        modalidade_opcao = wait.until(EC.element_to_be_clickable(
            (By.XPATH, "//li[contains(text(),'M√âDIO')]")
        ))
        modalidade_opcao.click()
        print("‚úÖ Modalidade selecionada!")

        # 4Ô∏è‚É£ S√©rie
        print(f"üîç Selecionando s√©rie: {aluno['ANO']} ANO")
        dropdown_serie = wait.until(EC.element_to_be_clickable((By.ID, "ext-gen1810")))
        dropdown_serie.click()
        time.sleep(1)

        serie_ano = str(aluno["ANO"]).strip()
        serie_opcao = wait.until(EC.element_to_be_clickable(
            (By.XPATH, f"//li[contains(text(),'{serie_ano} ANO')]")
        ))
        serie_opcao.click()
        print(f"‚úÖ S√©rie {serie_ano} ANO selecionada!")

        # 5Ô∏è‚É£ Trajeto
        print("üîç Selecionando trajeto...")
        dropdown_trajeto = wait.until(EC.element_to_be_clickable((By.ID, "ext-gen1814")))
        dropdown_trajeto.click()
        time.sleep(1)

        turno_tag = {
            "MATUTINO": ["(M)", "(M/V)"],
            "VESPERTINO": ["(V)", "(M/V)"],
            "NOTURNO": ["(N)"],
            "INTEGRAL": ["(M)", "(V)", "(M/V)"]
        }.get(turno_normalizado, ["(M)", "(V)", "(M/V)"])

        for tag in turno_tag:
            try:
                trajeto_opcao = wait.until(EC.element_to_be_clickable((
                    By.XPATH,
                    f"//li[contains(text(),'{aluno['LOCALIDADE']}') and contains(text(),'{tag}')]"
                )))
                trajeto_opcao.click()
                print(f"‚úÖ Trajeto com tag '{tag}' selecionado!")
                break
            except:
                continue
        else:
            print("‚ö†Ô∏è Nenhum trajeto encontrado para a localidade/turno. Pulando trajeto.")

        # 6Ô∏è‚É£ Dist√¢ncia
        print("üîç Preenchendo dist√¢ncia...")
        campo_distancia = wait.until(EC.presence_of_element_located((By.ID, "ext-gen1863")))
        campo_distancia.clear()
        campo_distancia.send_keys("5")
        print("‚úÖ Dist√¢ncia preenchida!")

        # 7Ô∏è‚É£ Salvar
        print("üîç Clicando em salvar...")
        botao_salvar = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Salvar']")))
        driver.execute_script("arguments[0].click();", botao_salvar)
        print(f"‚úÖ Matr√≠cula de {aluno['NOME']} salva com sucesso!")

    except Exception as e:
        print(f"‚ùå Erro ao preencher o formul√°rio para {aluno['NOME']}: {e}")
        
pyautogui.PAUSE = 0.5
pyautogui.FAILSAFE = True

def preencher_com_tab(aluno):
    print(f"üìå Iniciando preenchimento via PyAutoGUI para {aluno['NOME']}")

    time.sleep(1)  # Aguarda o formul√°rio carregar

    # 1Ô∏è‚É£ Ir do campo "Data de Vencimento" at√© o campo "Turno"
    print("‚û°Ô∏è Pulando campo 'Data Vencimento' (pressionando TAB 1x)...")
    pyautogui.press('tab')
    time.sleep(1)

    # 2Ô∏è‚É£ Preencher Turno
    turno = aluno["TURNO"].upper()
    turno_mapa = {
        "MATUTINO": "Manh√£",
        "VESPERTINO": "Tarde",
        "NOTURNO": "Noite",
        "INTEGRAL": "Integral"
    }
    turno_label = turno_mapa.get(turno, "Integral")

    print(f"üïì Preenchendo turno: {turno_label}")
    pyautogui.write(turno_label)
    pyautogui.press('enter')
    pyautogui.press('tab')
    time.sleep(1)

    # 3Ô∏è‚É£ Unidade
    print("üè´ Selecionando unidade: EEB GON√áALVES DIAS")
    pyautogui.write("EEB G")
    time.sleep(1)
    pyautogui.press('down')
    pyautogui.press('enter')
    time.sleep(1)

    # 4Ô∏è‚É£ Modalidade
    print("üéì Selecionando modalidade: M√âDIO")
    pyautogui.write("M")
    time.sleep(1)
    pyautogui.press('enter')
    time.sleep(1)

    # 5Ô∏è‚É£ S√©rie
    ano = str(aluno["ANO"]).strip()
    print(f"üìö Selecionando s√©rie: {ano} ANO")
    pyautogui.write(f"{ano}")
    time.sleep(1)
    pyautogui.press('enter')
    time.sleep(1)

   # 6Ô∏è‚É£ Trajeto
    trajeto_codigo = aluno["LINHA"].strip()
    print(f"üöå Selecionando trajeto (LINHA): {trajeto_codigo}")
    pyautogui.write(trajeto_codigo)
    time.sleep(1)
    pyautogui.press('tab')
    time.sleep(1)
    print("üìè Preenchendo PARADA: 5")
    pyautogui.write("5")
    time.sleep(2)
    # üîç Abrir modal clicando na lupa
    print("üîç Clicando na lupa para abrir modal...")
    pyautogui.moveTo(808, 600)  # <- Posi√ß√£o da lupa
    pyautogui.click()
    print("‚è≥ Aguardando modal abrir...")
    time.sleep(4)  # Aumentar se necess√°rio

    # ‚úÖ Clicar em 'Selecionar'
    print("‚úÖ Clicando no bot√£o 'Selecionar' do modal...")
    pyautogui.moveTo(1178, 942)  # Posi√ß√£o do bot√£o
    pyautogui.click()
    time.sleep(4)

    # 7Ô∏è‚É£ Dist√¢ncia
    pyautogui.moveTo(730, 800)
    pyautogui.click()
    time.sleep(2)
    print("üìè Preenchendo dist√¢ncia: 5")
    pyautogui.write("5")
    time.sleep(1)
    pyautogui.press('tab')
    pyautogui.press('tab')
    pyautogui.press('tab')
    pyautogui.press('enter')
    pyautogui.press('tab')
    pyautogui.press('tab')
    pyautogui.press('tab')
    time.sleep(1)

    # 8Ô∏è‚É£ Salvar
    print("üíæ Salvando cadastro...")
    pyautogui.press('enter')
    print(f"‚úÖ Cadastro de {aluno['NOME']} finalizado!\n")
    time.sleep(4)